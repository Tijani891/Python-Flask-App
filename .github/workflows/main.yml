name: Build and Deploy Docker Image to EC2

on:
  push:
    branches:
      - main  

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2


      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}


      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/python-flask-todo-app:latest


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  


      - name: Create EC2 Instance
        id: create_ec2
        run: |
            INSTANCE_ID=$(aws ec2 run-instances --image-id ami-005fc0f236362e99f --count 1 --instance-type t2.micro --key-name github-actions --security-group-ids sg-01ccef6495848c174 --subnet-id subnet-071379f6cd21e22a7  --query 'Instances[0].InstanceId' --output text)
            echo "EC2 Instance created: $INSTANCE_ID"
            echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for instance to be running
        run: |
         aws ec2 wait instance-running --instance-ids $INSTANCE_ID

      - name: Get EC2 Public DNS
        id: get_dns
        run: |
            EC2_PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicDnsName' --output text)
            echo "EC2 Public DNS: $EC2_PUBLIC_DNS"
            echo "EC2_PUBLIC_DNS=$EC2_PUBLIC_DNS" >> $GITHUB_ENV

      - name: Install Docker and run container on EC2
        run: |
            echo "Connecting to EC2 instance at $EC2_PUBLIC_DNS..."

            echo "${{ secrets.EC2_SSH_KEY }}" > github-actions.pem
            sudo chmod 400 github-actions.pem  

            ssh -o StrictHostKeyChecking=no -t -i "github-actions.pem" ec2-user@$EC2_PUBLIC_DNS << 'EOF'
                if ! command -v docker &> /dev/null
                then
                    echo "Docker not installed. Installing..."
                    sudo yum update -y
                    sudo yum install docker -y
                    sudo service docker start
                    sudo usermod -a -G docker ec2-user
                else
                    echo "Docker already installed."
                fi

                echo ${{ secrets.DOCKERHUB_PASSWORD }} | sudo docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

                sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/python-flask-todo-app:latest


                sudo docker run -d --name flask-app -p 5000:5000 ${{ secrets.DOCKERHUB_USERNAME }}/python-flask-todo-app:latest
            EOF

